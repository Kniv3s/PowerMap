function toBinary ($dottedDecimal){
 $dottedDecimal.split(".") | %{$binary=$binary + $([convert]::toString($_,2).padleft(8,"0"))}
 return $binary
}
function toDottedDecimal ($binary){
 do {$dottedDecimal += "." + [string]$([convert]::toInt32($binary.substring($i,8),2)); $i+=8 } while ($i -le 24)
 return $dottedDecimal.substring(1)
}
function PowerMap {
  <#
    .SYNOPSIS
    Scan IP-Addresses, Ports, and HostNames

    .DESCRIPTION
    Scan for IP-Addresses, HostNames, and open Ports in your Network.

    .PARAMETER StartAddress
    StartAddress Range

    .PARAMETER EndAddress
    EndAddress Range

    .PARAMETER ResolveHost
    Resolve HostName

    .PARAMETER ScanPort
    Perform a PortScan

    .PARAMETER Ports
    Ports That should be scanned, default values are: 21,22,23,53,69,71,80,98,110,139,111,
    389,443,445,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,
    5801,5900,5555,5901

    .PARAMETER TimeOut
    Time (in MilliSeconds) before TimeOut, Default set to 100

    .PARAMETER Subnet
    A subnet or subnetmask to scan over. When used with (or without) EndAddress; will override
    StartAddress with first address in subnet and override EndAddress with last address in subnet
  #>
  Param(
    [parameter(Mandatory = $true,
      Position = 0)]
    [ValidatePattern("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")]
    [string]$StartAddress,
    [string]$EndAddress,
    [string]$Subnet,
    [switch]$ResolveHost,
    [switch]$ScanPort,
    [int[]]$Ports = @(21,22,23,53,69,71,80,98,110,139,111,389,443,445,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901),
    [int]$TimeOut = 100
  )
  Begin {
    $ping = New-Object System.Net.Networkinformation.Ping
  }
  Process {
  $hosts = @()
    if (!$EndAddress -and !$Subnet) {
       $hosts += $StartAddress
    } else {
      if ($Subnet) {
        $ipBinary = toBinary($StartAddress)
        if ($Subnet.StartsWith("/") -or $Subnet.StartsWith("\")) {
          $netBits = $Subnet.Substring(1)
        } else {
          $netBinary = toBinary($Subnet)
          $netBits=$smBinary.indexOf("0")
        }
        $StartAddress = toDottedDecimal($ipBinary.substring(0,$netBits).padright(31,"0") + "1")
        $EndAddress = toDottedDecimal($ipBinary.substring(0,$netBits).padright(31,"1") + "0")
      }
      foreach($a in ($StartAddress.Split(".")[0]..$EndAddress.Split(".")[0])) {
        foreach($b in ($StartAddress.Split(".")[1]..$EndAddress.Split(".")[1])) {
          foreach($c in ($StartAddress.Split(".")[2]..$EndAddress.Split(".")[2])) {
            foreach($d in ($StartAddress.Split(".")[3]..$EndAddress.Split(".")[3])) {
              $hosts += "$a.$b.$c.$d"
            }
          }
        }
      }
    }
    foreach ($h in $hosts) {
      $d = $h.Split(".")[3]
      if ($EndAddress) {
        write-progress -activity PingSweep -status "$h" -percentcomplete (($d/($EndAddress.Split(".")[3])) * 100)
      }
      $pingStatus = $ping.Send("$h",$TimeOut)
      if($pingStatus.Status -eq "Success") {
        if($ResolveHost) {
          if ($EndAddress){
            write-progress -activity ResolveHost -status "$h" -percentcomplete (([int]$d/[int]($EndAddress.Split(".")[3])) * 100) -Id 1
          }
          $getHostEntry = [Net.DNS]::BeginGetHostEntry($pingStatus.Address, $null, $null)
        }
        if($ScanPort) {
          $openPorts = @()
          for($i = 1; $i -le $ports.Count;$i++) {
            $port = $Ports[($i-1)]
            write-progress -activity PortScan -status "$h" -percentcomplete (($i/($Ports.Count)) * 100) -Id 2
            $client = New-Object System.Net.Sockets.TcpClient
            $beginConnect = $client.BeginConnect($pingStatus.Address,$port,$null,$null)
            if($client.Connected) {
              $openPorts += $port
            } else {
              # Wait
              Start-Sleep -Milli $TimeOut
              if($client.Connected) {
                $openPorts += $port
              }
            }
            $client.Close()
          }
        }
        if($ResolveHost) {
          $hostName = ([Net.DNS]::EndGetHostEntry([IAsyncResult]$getHostEntry)).HostName
        }
        # Return Object
        New-Object PSObject -Property @{
          IPAddress = "$h";
          HostName = $hostName;
          Ports = $openPorts
        } | Select-Object IPAddress, HostName, Ports
      }
    }
  }
  End {
  }
}

